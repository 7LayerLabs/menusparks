version: '3.8'

services:
  menusparks:
    image: menusparks:latest
    build:
      context: .
      dockerfile: Dockerfile
    deploy:
      replicas: 3
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    ports:
      - "80:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    networks:
      - menusparks-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
    ports:
      - "443:443"
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - menusparks-network
    depends_on:
      - menusparks

  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
    volumes:
      - redis-data:/data
    networks:
      - menusparks-network
    command: redis-server --appendonly yes

  postgres:
    image: postgres:15-alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    environment:
      - POSTGRES_USER=${DB_USER:-menusparks}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME:-menusparks_db}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - menusparks-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-menusparks}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  menusparks-network:
    driver: overlay
    attachable: true

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local